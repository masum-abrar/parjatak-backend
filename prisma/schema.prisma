generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String       @id @default(uuid())
  name        String
  price       Float?       @default(0)
  isDeleted   Boolean      @default(false)
  createdBy   String?
  updatedBy   String?
  deletedBy   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  roleModules RoleModule[]
  users       User[]
  modules     Module[]     @relation("ModuleToRole")
}

model Module {
  id          String       @id @default(uuid())
  name        String
  isDeleted   Boolean      @default(false)
  createdBy   String?
  updatedBy   String?
  deletedBy   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  roleModules RoleModule[]
  roles       Role[]       @relation("ModuleToRole")
}

model RoleModule {
  id        String   @id @default(uuid())
  roleId    String
  moduleId  String
  isDeleted Boolean  @default(false)
  createdBy String?
  updatedBy String?
  deletedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model User {
  id                             String                 @id @default(uuid())
  roleId                         String?
  parentId                       String?
  divisionId                     String?
  districtId                     String?
  name                           String
  fullname                       String?
  email                          String
  phone                          String
  address                        String?
  billingAddress                 String?
  country                        String?
  city                           String?
  postalCode                     String?
  district                       String?
  image                          String?                @default("images/user/user.png")
  password                       String?
  otp                            Int?
  otpCount                       Int?                   @default(0)
  slug                           String?
  type                           String?                @default("customer")
  initialPaymentAmount           Float?                 @default(0)
  initialPaymentDue              Float?                 @default(0)
  installmentTime                Float?                 @default(0)
  refreshToken                   String?
  isActive                       Boolean                @default(true)
  isDeleted                      Boolean                @default(false)
  createdBy                      String?
  updatedBy                      String?
  deletedBy                      String?
  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime               @updatedAt
  campaigns                      Campaign[]
  categories                     Category[]
  order                          Order[]
  payments                       Payment[]
  preorder                       Preorder[]
  products                       Product[]
  review                         Review[]
  suppliers                      Supplier[]
  parent                         User?                  @relation("ParentIdUserId", fields: [parentId], references: [id])
  children                       User[]                 @relation("ParentIdUserId")
  role                           Role?                  @relation(fields: [roleId], references: [id])
  wishlist                       Wishlist[]
  follower                       Follower[]             @relation("otherUser")
  following                      Follower[]             @relation("meUser")
  division                       Division?              @relation(fields: [divisionId], references: [id])
  disctrict                      District?              @relation(fields: [districtId], references: [id])
  districtFollower               DistrictFollower[]
  place                          Place[]
  placeFollower                  PlaceFollower[]
  placeReview                    PlaceReview[]
  parentUserPlaceReviewLike      PlaceReviewLike[]      @relation("parentUserPlaceReviewLike")
  userPlaceReviewLike            PlaceReviewLike[]      @relation("userPlaceReviewLike")
  parentUserPlaceReviewReply     PlaceReviewReply[]     @relation("parentUserPlaceReviewReply")
  userPlaceReviewReply           PlaceReviewReply[]     @relation("userPlaceReviewReply")
  post                           Post[]
  parentUserPostLike             PostLike[]             @relation("parentUserPostLike")
  userPostLike                   PostLike[]             @relation("userPostLike")
  parentUserPostComment          PostComment[]          @relation("parentUserPostComment")
  userPostComment                PostComment[]          @relation("userPostComment")
  parentUserPostCommentLike      PostCommentLike[]      @relation("parentUserPostCommentLike")
  userPostCommentLike            PostCommentLike[]      @relation("userPostCommentLike")
  parentUserPostCommentReply     PostCommentReply[]     @relation("parentUserPostCommentReply")
  userPostCommentReply           PostCommentReply[]     @relation("userPostCommentReply")
  parentUserPostCommentReplyLike PostCommentReplyLike[] @relation("parentUserPostCommentReplyLike")
  userPostCommentReplyLike       PostCommentReplyLike[] @relation("userPostCommentReplyLike")
  placeLike                      PlaceLike[]
  placeVisitor                   PlaceVisitor[]
  diary                          Diary[]
  bucketList                     BucketList[]
  parentUserBucketListLike       BucketListLike[]       @relation("parentUserBucketListLike")
  userBucketListLike             BucketListLike[]       @relation("userBucketListLike")
  list                           List[]
  parentUserListLike             ListLike[]             @relation("parentUserListLike")
  userListLike                   ListLike[]             @relation("userListLike")
  listReview                     ListReview[]
  favoritePlace                  FavoritePlace[]
  parentUserNotification         Notification[]         @relation("parentUserNotification")
  userNotification               Notification[]         @relation("userNotification")
  listPlace                      ListPlace[]
}

model Follower {
  id           String   @id @default(uuid())
  parentUserId String?
  userId       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  otherUser User? @relation("otherUser", fields: [userId], references: [id])
  meUser    User? @relation("meUser", fields: [parentUserId], references: [id])
}

model Division {
  id        String   @id @default(uuid())
  name      String
  image     String?
  viewCount Int      @default(0)
  slug      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  district District[]
  user     User[]
  place    Place[]
  post     Post[]
}

model District {
  id         String   @id @default(uuid())
  divisionId String?
  name       String
  image      String?
  viewCount  Int      @default(0)
  slug       String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  division     Division?          @relation(fields: [divisionId], references: [id])
  user         User[]
  images       DistrictImage[]
  follower     DistrictFollower[]
  subdistrict  Subdistrict[]
  place        Place[]
  post         Post[]
  notification Notification[]
}

model DistrictImage {
  id         String   @id @default(uuid())
  districtId String?
  image      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  district District? @relation(fields: [districtId], references: [id])
}

model DistrictFollower {
  id         String   @id @default(uuid())
  districtId String?
  userId     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  district District? @relation(fields: [districtId], references: [id])
  user     User?     @relation(fields: [userId], references: [id])
}

model Subdistrict {
  id         String   @id @default(uuid())
  districtId String?
  name       String
  image      String?
  viewCount  Int      @default(0)
  slug       String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  district District?          @relation(fields: [districtId], references: [id])
  images   SubdistrictImage[]
  place    Place[]
  post     Post[]
}

model SubdistrictImage {
  id            String   @id @default(uuid())
  subdistrictId String?
  image         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  subdistrict Subdistrict? @relation(fields: [subdistrictId], references: [id])
}

model PlaceCategory {
  id        String   @id @default(uuid())
  name      String
  slug      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  place Place[]
}

model Place {
  id            String   @id @default(uuid())
  userId        String?
  divisionId    String?
  districtId    String?
  subdistrictId String?
  categoryId    String?
  address       String?
  description   String?
  tag           String[] @default([])
  name          String
  slug          String?
  priceRange    String?
  phone         String?
  openingHour   String?
  mapLink       String?
  direction     String?
  viewCount     Int      @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  division    Division?      @relation(fields: [divisionId], references: [id])
  district    District?      @relation(fields: [districtId], references: [id])
  subdistrict Subdistrict?   @relation(fields: [subdistrictId], references: [id])
  category    PlaceCategory? @relation(fields: [categoryId], references: [id])
  user        User?          @relation(fields: [userId], references: [id])

  images        PlaceImage[]
  tags          PlaceTag[]
  follower      PlaceFollower[]
  review        PlaceReview[]
  post          Post[]
  like          PlaceLike[]
  visitor       PlaceVisitor[]
  diary         Diary[]
  bucketList    BucketList[]
  list          List[]
  favoritePlace FavoritePlace[]
  notification  Notification[]
  listPlace     ListPlace[]
}

model PlaceImage {
  id        String   @id @default(uuid())
  placeId   String?
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  place Place? @relation(fields: [placeId], references: [id])
}

model PlaceTag {
  id        String   @id @default(uuid())
  placeId   String?
  name      String
  slug      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  place Place? @relation(fields: [placeId], references: [id])
}

model PlaceVisitor {
  id        String   @id @default(uuid())
  placeId   String?
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  place Place? @relation(fields: [placeId], references: [id])
  user  User?  @relation(fields: [userId], references: [id])
}

model PlaceFollower {
  id        String   @id @default(uuid())
  placeId   String?
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  place Place? @relation(fields: [placeId], references: [id])
  user  User?  @relation(fields: [userId], references: [id])
}

model PlaceLike {
  id        String   @id @default(uuid())
  placeId   String?
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  place Place? @relation(fields: [placeId], references: [id])
  user  User?  @relation(fields: [userId], references: [id])
}

model PlaceReview {
  id          String   @id @default(uuid())
  placeId     String?
  userId      String?
  rating      Float?
  comment     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviewDate  DateTime?  

  place       Place?             @relation(fields: [placeId], references: [id])
  user        User?              @relation(fields: [userId], references: [id])
  like        PlaceReviewLike[]
  reply       PlaceReviewReply[]
  images      PlaceReviewImage[]
}


model PlaceReviewImage {
  id        String   @id @default(uuid())
  reviewId  String?
  image     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review PlaceReview? @relation(fields: [reviewId], references: [id])
}

model PlaceReviewLike {
  id           String   @id @default(uuid())
  reviewId     String?
  parentUserId String?
  userId       String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  review     PlaceReview? @relation(fields: [reviewId], references: [id])
  parentUser User?        @relation("parentUserPlaceReviewLike", fields: [parentUserId], references: [id])
  user       User?        @relation("userPlaceReviewLike", fields: [userId], references: [id])
}

model PlaceReviewReply {
  id           String   @id @default(uuid())
  reviewId     String?
  parentUserId String?
  userId       String?
  reply        String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  review     PlaceReview? @relation(fields: [reviewId], references: [id])
  parentUser User?        @relation("parentUserPlaceReviewReply", fields: [parentUserId], references: [id])
  user       User?        @relation("userPlaceReviewReply", fields: [userId], references: [id])
}

//type = discussion, event, plan
model Post {
  id             String   @id @default(uuid())
  userId         String?
  divisionId     String?
  districtId     String?
  subdistrictId  String?
  placeId        String?
  description    String?
  title          String?
  slug           String?
  eventStartDate String?
  evenetEndDate  String?
  type           String?  @default("discussion")
  viewCount      Int      @default(0)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  division    Division?    @relation(fields: [divisionId], references: [id])
  district    District?    @relation(fields: [districtId], references: [id])
  subdistrict Subdistrict? @relation(fields: [subdistrictId], references: [id])
  place       Place?       @relation(fields: [placeId], references: [id])
  user        User?        @relation(fields: [userId], references: [id])

  images               PostImage[]
  like                 PostLike[]
  comment              PostComment[]
  postCommentLike      PostCommentLike[]
  postCommentReply     PostCommentReply[]
  postCommentReplyLike PostCommentReplyLike[]
  notification         Notification[]
}

model PostImage {
  id        String   @id @default(uuid())
  postId    String?
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post? @relation(fields: [postId], references: [id])
}

model PostLike {
  id           String   @id @default(uuid())
  postId       String?
  parentUserId String?
  userId       String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  post       Post? @relation(fields: [postId], references: [id])
  parentUser User? @relation("parentUserPostLike", fields: [parentUserId], references: [id])
  user       User? @relation("userPostLike", fields: [userId], references: [id])
}

model PostComment {
  id           String   @id @default(uuid())
  postId       String?
  parentUserId String?
  userId       String?
  comment      String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  post                 Post?                  @relation(fields: [postId], references: [id])
  parentUser           User?                  @relation("parentUserPostComment", fields: [parentUserId], references: [id])
  user                 User?                  @relation("userPostComment", fields: [userId], references: [id])
  like                 PostCommentLike[]
  reply                PostCommentReply[]
  postCommentReplyLike PostCommentReplyLike[]
}

model PostCommentLike {
  id            String   @id @default(uuid())
  postId        String?
  postCommentId String?
  parentUserId  String?
  userId        String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  post        Post?        @relation(fields: [postId], references: [id])
  postComment PostComment? @relation(fields: [postCommentId], references: [id])
  parentUser  User?        @relation("parentUserPostCommentLike", fields: [parentUserId], references: [id])
  user        User?        @relation("userPostCommentLike", fields: [userId], references: [id])
}

model PostCommentReply {
  id            String   @id @default(uuid())
  postId        String?
  postCommentId String?
  parentUserId  String?
  userId        String?
  reply         String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  post        Post?                  @relation(fields: [postId], references: [id])
  postComment PostComment?           @relation(fields: [postCommentId], references: [id])
  parentUser  User?                  @relation("parentUserPostCommentReply", fields: [parentUserId], references: [id])
  user        User?                  @relation("userPostCommentReply", fields: [userId], references: [id])
  like        PostCommentReplyLike[]
}

model PostCommentReplyLike {
  id                 String   @id @default(uuid())
  postId             String?
  postCommentId      String?
  postCommentReplyId String?
  parentUserId       String?
  userId             String?
  reply              String?
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  post             Post?             @relation(fields: [postId], references: [id])
  postComment      PostComment?      @relation(fields: [postCommentId], references: [id])
  postCommentReply PostCommentReply? @relation(fields: [postCommentReplyId], references: [id])
  parentUser       User?             @relation("parentUserPostCommentReplyLike", fields: [parentUserId], references: [id])
  user             User?             @relation("userPostCommentReplyLike", fields: [userId], references: [id])
}

model Diary {
  id          String   @id @default(uuid())
  userId      String?
  placeId     String?
  description String?
  title       String?
  slug        String?
  targetDate  String?
  viewCount   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  place Place? @relation(fields: [placeId], references: [id])
  user  User?  @relation(fields: [userId], references: [id])

  images       DiaryImage[]
  notification Notification[]
}

model DiaryImage {
  id        String   @id @default(uuid())
  diaryId   String?
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  diary Diary? @relation(fields: [diaryId], references: [id])
}

model BucketList {
  id          String   @id @default(uuid())
  userId      String?
  placeId     String?
  description String?
  title       String?
  slug        String?
  targetDate  String?
  viewCount   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  place Place? @relation(fields: [placeId], references: [id])
  user  User?  @relation(fields: [userId], references: [id])

  images       BucketListImage[]
  like         BucketListLike[]
  notification Notification[]
}

model BucketListImage {
  id           String   @id @default(uuid())
  bucketListId String?
  image        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  bucketList BucketList? @relation(fields: [bucketListId], references: [id])
}

model BucketListLike {
  id           String   @id @default(uuid())
  bucketListId String?
  parentUserId String?
  userId       String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  bucketList BucketList? @relation(fields: [bucketListId], references: [id])
  parentUser User?       @relation("parentUserBucketListLike", fields: [parentUserId], references: [id])
  user       User?       @relation("userBucketListLike", fields: [userId], references: [id])
}

model List {
  id          String   @id @default(uuid())
  userId      String?
  placeId     String?
  description String?
  title       String?
  slug        String?
  targetDate  String?
  viewCount   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  place Place? @relation(fields: [placeId], references: [id])
  user  User?  @relation(fields: [userId], references: [id])

  images       ListImage[]
  like         ListLike[]
  review       ListReview[]
  notification Notification[]
  listPlace    ListPlace[]
}

model ListPlace {
  id        String   @id @default(uuid())
  listId    String?
  placeId   String?
  userId    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  place Place? @relation(fields: [placeId], references: [id])
  list  List?  @relation(fields: [listId], references: [id])
  user  User?  @relation(fields: [userId], references: [id])
}

model ListImage {
  id        String   @id @default(uuid())
  listId    String?
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  list List? @relation(fields: [listId], references: [id])
}

model ListLike {
  id           String   @id @default(uuid())
  listId       String?
  parentUserId String?
  userId       String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  list       List? @relation(fields: [listId], references: [id])
  parentUser User? @relation("parentUserListLike", fields: [parentUserId], references: [id])
  user       User? @relation("userListLike", fields: [userId], references: [id])
}

model ListReview {
  id        String   @id @default(uuid())
  listId    String?
  userId    String?
  rating    Float?
  comment   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  list List? @relation(fields: [listId], references: [id])
  user User? @relation(fields: [userId], references: [id])
}

model FavoritePlace {
  id        String   @id @default(uuid())
  userId    String?
  placeId   String?
  viewCount Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  place Place? @relation(fields: [placeId], references: [id])
  user  User?  @relation(fields: [userId], references: [id])
}

model Notification {
  id           String   @id @default(uuid())
  parentUserId String?
  userId       String?
  placeId      String?
  districtId   String?
  listId       String?
  bucketListId String?
  postId       String?
  reviewId     String?
  diaryId      String?
  link         String?
  message      String?
  type         String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  list       List?       @relation(fields: [listId], references: [id])
  place      Place?      @relation(fields: [placeId], references: [id])
  district   District?   @relation(fields: [districtId], references: [id])
  bucketList BucketList? @relation(fields: [bucketListId], references: [id])
  post       Post?       @relation(fields: [postId], references: [id])
  diary      Diary?      @relation(fields: [diaryId], references: [id])
  parentUser User?       @relation("parentUserNotification", fields: [parentUserId], references: [id])
  user       User?       @relation("userNotification", fields: [userId], references: [id])
}

model Banner {
  id        String   @id @default(uuid())
  title     String
  subtitle  String
  image     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String?
}

model Payment {
  id        String    @id @default(uuid())
  userId    String
  date      DateTime? @default(now())
  amount    Float     @default(0)
  due       Float?    @default(0)
  isDeleted Boolean   @default(false)
  createdBy String?
  updatedBy String?
  deletedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id             String           @id @default(uuid())
  userId         String
  name           String
  image          String?          @default("images/category/category.png")
  slug           String
  createdBy      String?
  updatedBy      String?
  deletedBy      String?
  isActive       Boolean          @default(true)
  isDeleted      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  campaigns      Campaign[]
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  products       Product[]
  subcategory    Subcategory[]
  subsubcategory Subsubcategory[]
}

model Subcategory {
  id             String           @id @default(uuid())
  categoryId     String
  name           String           @unique
  image          String?
  slug           String
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  product        Product[]
  category       Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subsubcategory Subsubcategory[]
}

model Subsubcategory {
  id            String      @id @default(uuid())
  categoryId    String
  subcategoryId String
  name          String      @unique
  image         String?
  slug          String
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  product       Product[]
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
}

model Campaign {
  id         String    @id @default(uuid())
  userId     String
  name       String
  image      String?   @default("images/campaign/campaign.png")
  date       DateTime? @default(now())
  slug       String
  categoryId String
  viewCount  Int?      @default(0)
  createdBy  String?
  updatedBy  String?
  deletedBy  String?
  isActive   Boolean   @default(true)
  isDeleted  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product[]
}

model Brand {
  id        String    @id @default(uuid())
  name      String    @unique
  image     String?
  slug      String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]
}

model Supplier {
  id        String    @id @default(uuid())
  userId    String
  name      String
  address   String
  phone     String
  email     String?
  createdBy String?
  updatedBy String?
  deletedBy String?
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id                String             @id @default(uuid())
  userId            String
  categoryId        String
  subcategoryId     String?
  subsubcategoryId  String?
  campaignId        String?
  supplierId        String?
  brandId           String?
  productCode       String?            @default(nanoid(6))
  barcode           String?            @default(nanoid(12))
  name              String
  shortDescription  String?
  longDescription   String?
  sku               String?
  isTrending        Boolean            @default(false)
  isFeatured        Boolean            @default(false)
  viewCount         Int?               @default(0)
  slug              String
  createdBy         String?
  updatedBy         String?
  deletedBy         String?
  isActive          Boolean            @default(true)
  isDeleted         Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  orderItems        OrderItem[]
  preorder          Preorder[]
  brand             Brand?             @relation(fields: [brandId], references: [id], onDelete: Cascade)
  campaign          Campaign?          @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  category          Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subcategory       Subcategory?       @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  subsubcategory    Subsubcategory?    @relation(fields: [subsubcategoryId], references: [id], onDelete: Cascade)
  supplier          Supplier?          @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  productAttributes ProductAttribute[]
  images            ProductImage[]
  review            Review[]
  wishlist          Wishlist[]
}

model ProductAttribute {
  id                    String      @id @default(uuid())
  productId             String
  size                  String
  costPrice             Float
  retailPrice           Float
  discountPercent       Float?      @default(0)
  discountPrice         Float?      @default(0)
  discountedRetailPrice Float
  stockAmount           Float
  isDeleted             Boolean     @default(false)
  createdBy             String?
  updatedBy             String?
  deletedBy             String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  orderItem             OrderItem[]
  preorder              Preorder[]
  product               Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  image     String?  @default("images/product/product.png")
  isDeleted Boolean  @default(false)
  createdBy String?
  updatedBy String?
  deletedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id                     String       @id @default(uuid())
  userId                 String?
  couponId               String?
  invoiceNumber          String?      @default(nanoid(6))
  customerName           String?
  customerPhone          String?
  customerAddress        String?
  customerBillingAddress String?
  customerEmail          String?
  customerCity           String?
  customerPostalCode     String?
  totalItems             Float
  subtotalCost           Float
  subtotal               Float
  paymentMethod          String?      @default("COD")
  status                 OrderStatus? @default(PENDING)
  otp                    String?
  deliveryChargeInside   Float?
  deliveryChargeOutside  Float?
  isDeleted              Boolean      @default(false)
  createdBy              String?
  updatedBy              String?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  coupon                 Coupon?      @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user                   User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems             OrderItem[]
}

model OrderItem {
  id                    String           @id @default(uuid())
  orderId               String
  productId             String
  productAttributeId    String
  name                  String
  size                  String
  costPrice             Float
  retailPrice           Float
  discountPercent       Float?           @default(0)
  discountPrice         Float?           @default(0)
  discountedRetailPrice Float
  quantity              Float
  totalCostPrice        Float
  totalPrice            Float
  isDeleted             Boolean          @default(false)
  createdBy             String?
  updatedBy             String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  order                 Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productAttribute      ProductAttribute @relation(fields: [productAttributeId], references: [id], onDelete: Cascade)
  product               Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id        String   @id @default(uuid())
  productId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(uuid())
  productId String
  userId    String
  rating    Float
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Coupon {
  id              String   @id @default(uuid())
  code            String
  name            String
  orderPriceLimit Float?
  discountAmount  Float
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  order           Order[]
}

model Preorder {
  id                 String            @id @default(uuid())
  productId          String
  userId             String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  productAttributeId String?
  productAttribute   ProductAttribute? @relation(fields: [productAttributeId], references: [id], onDelete: Cascade)
  product            Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Newsletter {
  id        String   @id @default(uuid())
  email     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  RETURNED
  CANCELED
}
